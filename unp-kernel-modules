#!/bin/bash

KMODFILE="/etc/sidux-modules"

while getopts vd: opt
do
        case $opt in
		v)
			set -x
			;;
		d)
			BASE_DIR=$OPTARG
			;;
                \?)
                        echo "Unknown option: \"$opt\""
			exit 1
                        ;;
        esac
done

if ((UID)); then
	# not root
	if [[ ! $BASE_DIR ]]; then
		BASE_DIR="$PWD"
		[[ -e $BASE_DIR/Makefile ]] || ln -s /usr/src/Makefile ${BASE_DIR}/
	fi

	if [[ ! -s $KMODFILE ]]; then
		echo "$KMODFILE is missing!"
		exit 2
	fi
	
	# dir must exist and be writeable
	if [[ ! -d $BASE_DIR ]]; then
		mkdir -p "$BASE_DIR" || {
			echo "Cannot create directory: \"$BASE_DIR\""
			exit 3
		}
	elif [[ -d $BASE_DIR ]]; then
		touch "$BASE_DIR" || {
			echo "Cannot write to directory: \"$BASE_DIR\""
			exit 4
		}
	fi
else
	# root
	BASE_DIR="/usr/src"
fi

# clear out existing modules dir
function rm_modules_dir () {
	pushd "$BASE_DIR" >/dev/null
		rm -rf modules
	popd >/dev/null
}

function pop_modules_dir () {
	pushd "$BASE_DIR" >/dev/null
		gawk '
		{
			tar = "^/usr/src/(.*)\\.(gz|bz2)$"
			list = gensub($0,"/var/lib/dpkg/info/&.list","g")
			while ((getline < list) > 0) {
				if ($0 ~ tar) {
					printf "unp %s >/dev/null", $0 | "/bin/sh"
					close("/bin/sh")
				}
			}
		}' $KMODFILE
	popd >/dev/null
}

# dont leave partially unpacked module source trees
trap "{ rm_modules_dir; exit 255; }" SIGINT SIGTERM

rm_modules_dir || exit 4
pop_modules_dir || exit 5
