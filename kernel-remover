#!/bin/bash
#
# we need gettext (is loaded in ssft.sh or cloned...)
if [ -f /usr/bin/gettext.sh ]; then
	. /usr/bin/gettext.sh || exit 1
else
	exit 1
fi
#---------------------------------------------------------------------
# we need root rights
#---------------------------------------------------------------------
if [ "$(id -u)" -ne 0 ]; then
	if [ -x "$(which su-to-root)" ]; then
		[ -n "$DISPLAY" ] &&  exec su-to-root -X -c "${0} $@"
		exec su-to-root -c "${0} $@"
	fi
	printf "ERROR: $0 needs root capabilities, please start it as root.\n\n" >&2
	exit 1
fi

TEXTDOMAIN="kernel-remover"
export TEXTDOMAIN
TEXTDOMAINDIR=/usr/share/locale
export TEXTDOMAINDIR

#---------------------------------------------------------------------
function usage {
	echo  "$(basename $0)"
	echo  "     -F parameter    use parameter as the graphical frontend"
	echo  "                     one of text | dialog | kdialog | zenity "
	echo  "     -f              do it withou asking anything"
	echo  "     -h              show this usage"
	exit 1
}
#---------------------------------------------------------------------
force=0
xtra=0
unset frontend
while getopts fhxF: name
do
case $name in
	f)  force=1;;
	F)  frontend="$OPTARG";;
	h)  usage;;
	x)	xtra=1;;
	*)  usage;;
esac
done
shift $(($OPTIND - 1))

#---------------------------------------------------------------------
function prepare()
{
	if [ "$force" -eq 0 ]; then
		# we need ssft 
		if [ -f /usr/bin/ssft.sh ]; then
			. /usr/bin/ssft.sh || exit 1
		else
			 echo "Please install the package \"ssft\"."
			 exit 1
		fi
	fi

	if [ -n "${frontend}" ]; then
		case $frontend in
			text)  SSFT_FRONTEND="${frontend}";;
			dialog)  SSFT_FRONTEND="${frontend}";;
			kdialog)  SSFT_FRONTEND="${frontend}";;
			zenity) SSFT_FRONTEND="${frontend}";;
			*)  echo unknown frontend && exit 1;;
		esac
	fi

	if [ -z "$DISPLAY" ]; then
		[ -x /usr/bin/dialog ] && SSFT_FRONTEND=${SSFT_FRONTEND:-"dialog"} || \
			SSFT_FRONTEND=${SSFT_FRONTEND:-"text"}
	else
		if [ -n "$DISPLAY" ] && [ ! -x /usr/bin/zenity ]; then
			if [ -x /usr/bin/dialog ]; then
				SSFT_FRONTEND="dialog"
			else
				SSFT_FRONTEND="text"
			fi
			DISPLAY=""
		else
			SSFT_FRONTEND=${SSFT_FRONTEND:-"zenity"}
		fi
	fi
}
#---------------------------------------------------------------------
# some useful functions
#---------------------------------------------------------------------
function inputbox {
	local Title
	local Text
	# inputbox Title Text dummy default
	Title="$1"
	Text="$2"
	# $3 not used
	# The default value if used
	SSFT_DEFAULT=$4
	ssft_read_string "${Title}" "${Text}";
}

#---------------------------------------------------------------------
function msgbox {
	local Title
	local Text
	# msgbox title text
	Title="$1"
	Text="$2"
	ssft_display_message "${Title}" "${Text}"
}
#---------------------------------------------------------------------
function select_more {
	local Title
	local Text
	# select one of a list
	Title=$1
	Text=$2
	shift 2
	if ssft_select_multiple "$Title" "$Text" $@ ; then
		Selected=$SSFT_RESULT
		return 0
	else
		return 1 
	fi
}
#---------------------------------------------------------------------
function yesno {
	local Title
	local Text
	# yesno title text width
	Title=$1
	Text=$2
	ssft_yesno "${Title}" "${Text}"
	return $?
}

#---------------------------------------------------------------------
#
# the current one will not be shown in the list ....

ACTUAL=$(uname -r)
TITLE="$(gettext "Removing installed kernels")"
CURRENT="$(eval_gettext "The actual (active) kernel is $(uname -r)")"

#---------------------------------------------------------------------
function remove_one_kernel 
{
	local Kernel
	local str
	Kernel=$1 
	str=$(echo $1 | sed -e's/\-sidux.*$//')
	if [ "${Kernel}" != "${ACTUAL}" ]; then
		apt-get remove --purge --yes $(dpkg -l | awk "/${str}/" | awk '{print $2}')
		if [ ! -e "/boot/vmlinuz-${Kernel}" ]; then
			rm -rf /lib/modules/${Kernel}
			rm -rf /usr/src/kernel-headers-${Kernel}
			rm -rf /usr/src/linux-headers-${Kernel}
			rm -rf /usr/src/linux-${Kernel}
		fi
	else
		# do not remove activ kernel
		:
	fi
}

#---------------------------------------------------------------------
function get_KernelList
{
	local Kernel
	pushd /boot 2>&1 >>/dev/null
	for v in vmlinuz-*; do 
		Kernel=$(echo $v|sed s/vmlinuz-//)
		if [ "${Kernel}" != "${ACTUAL}" ]; then
			[ -z "${KernelList}" ] && KernelList="${Kernel}" ||\
			KernelList="${KernelList} ${Kernel}"
			# echo KernelList="$KernelList"
		else
			:
			# echo $Kernel
		fi
	done
	popd 2>&1 >> /dev/null
}

#---------------------------------------------------------------------
function actualize_the_grub
{
	[ -r /boot/grub/menu.lst -a -x /usr/sbin/update-grub ] && /usr/sbin/update-grub
}

#---------------------------------------------------------------------
# Main
#---------------------------------------------------------------------
if [ "${xtra}" -eq 1 ]; then
	KernelList="$@"
    for i in  ${KernelList} ; do
        removing="$(eval_gettext "removing kernel ${i}")"
        echo $removing
        remove_one_kernel "$i"
    done
    MSG="$(eval_gettext "the following kernels have been removed: \"${KernelList}\"")"
    echo $MSG
    actualize_the_grub
	exit 0
fi

prepare

get_KernelList

if [ -z "${KernelList}" ]; then
	MSG="$(gettext "There is only one kernel installed on this system. Nothing to be done!")"
	msgbox "${TITLE}" "${MSG}"
	exit 0
fi

if [ "${force}" -eq 1 ]; then
	current="$(eval_gettext "The actual (active) kernel is $(uname -r)")"
	echo ${current}
	for i in  ${KernelList} ; do
		removing="$(eval_gettext "removing kernel ${i}")"
		echo $removing
		remove_one_kernel "$i"
	done
	MSG="$(eval_gettext "the following kernels have been removed: \"${KernelList}\"")"
	echo $MSG
	actualize_the_grub
else
	select_more "${TITLE}" "${CURRENT}" ${KernelList} 
	if [ "$?" -ne 0 ]; then
		exit 10
	fi
	if [ -z "${SSFT_RESULT}" ]; then
		exit 12
	fi

	one_removed=false
	for i in ${SSFT_RESULT}; do
		MSG="$i : $(gettext "Should I remove this kernel?") "
		yesno "${TITLE}" "${MSG}"

		if [ "$?" -eq 0 ]; then
			remove_one_kernel "$i"
			one_removed=true
		else
			msgbox "${TiTLE}" "$(gettext "Kernel not removed:") $i"
		fi
	done
	if [ "$one_removed" = "true" ]; then
		actualize_the_grub
	fi
fi
exit 0

